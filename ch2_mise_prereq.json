[
  {
    "question": "How much faster do you think mise is at install a version of python compared to pyenv?",
    "answer": {
      "choices": [
        "Up to 10 times faster",
        "Up to 5 times faster",
        "Up to 3 times faster",
        "Up to 2 times faster"
      ],
      "correct_choice_index": 0,
      "explanation": "According to the `mise` GitHub repository, it can be up to 10 times faster than `pyenv` for installing Python versions."
    }
  },
  {
    "question": "What is the first step to install mise per it's [GitHub repository quick-start](https://github.com/jdx/mise?tab=readme-ov-file#quickstart) guide?",
    "answer": {
      "choices": [
        "Clone the repository",
        "`$ curl https://mise.run | sh`",
        "`$ mise init`",
        "`$ mise install`"
      ],
      "correct_choice_index": 1
    }
  },
  "Now, the following might feel a bit like a tangent, but it is important because learning these commonly used unix commands is very helpful for backend server management / deployment scripts / day to day use cases.",
  {
    "question": "What does the `$ curl https://mise.run` do?",
    "answer": {
      "choices": [
        "It downloads the content of the URL and saves it to a file, then executes it",
        "It downloads the content of the URL and executes it",
        "It downloads the content of the URL and saves it to a file",
        "It downloads the content of the URL and prints it to the terminal"
      ],
      "correct_choice_index": 3
    }
  },
  "Now let's look at the second command, `sh`. Run `$ sh` at the terminal, what does it do?",
  {
    "question": "What does the `$ sh` command do?",
    "answer": {
      "choices": [
        "It opens a new shell interpreter",
        "It executes the content of the file",
        "It prints the content of the file",
        "It saves the content of the file"
      ],
      "correct_choice_index": 0
    }
  },
  "Let's try to pass code to the `$ sh` interpreter in the same two ways like we did with the python command. Create a file with `$ touch hi.sh` and add `echo 'Hi'` to it.",
  {
    "question": "How do we give the `$ sh` interpreter the code `echo 'Hi'` via all at once as a script?",
    "answer": {
      "choices": [
        "You need to first setup a virtual environment",
        "`$ sh` then type `echo 'Hi'`",
        "`$ sh hi.sh`",
        "A and C"
      ],
      "correct_choice_index": 2
    }
  },
  {
    "question": "How do we give the `$ sh` interpreter the code `echo 'Hi'` via one command at a time?",
    "answer": {
      "choices": [
        "`$ sh` then type `echo 'Hi'`",
        "`$ sh -c \"'echo 'Hi'\"`",
        "`$ echo 'echo \"hi\"' | sh`",
        "All of the above"
      ],
      "correct_choice_index": 3,
      "explanation": "Though all of these work we want understand the `$ echo 'echo \"hi\"' | sh` the most. This is because it is a common pattern to pipe the output of one command to another command as `$ curl https://mise.run` | sh does. Why doesn't `$ echo 'hi' | sh` not work? The error you get is `sh: 1: hi: not found`. This is because echo outputs 'hi', which is not a valid command. Hence, we need to double echo"
    }
  },
  "Now that we know `$ curl https://mise.run` downloads the content of the URL and outputs it, `|` passes the output to `$ sh`, which runs the commands. We see how `mise` is installed. Some code is given to the `sh` interpreter to run.",
  {
    "question": "The next step to install mise per it's [GitHub repository quick-start](https://github.com/jdx/mise?tab=readme-ov-file#quickstart) guide? is: Hook mise into your shell (pick the right one for your shell): ... which is the right choice?",
    "answer": {
      "choices": [
        "`$ echo 'eval \"$(~/.local/bin/mise activate bash)\"' >> ~/.bashrc`",
        "`$ echo 'eval \"$(~/.local/bin/mise activate zsh)\"' >> ~/.zshrc`",
        "`$ echo ''~/.local/bin/mise activate fish | source'' >> ~/.config/fish/config.fish`",
        "None of the above"
      ],
      "correct_choice_index": 1,
      "explanation": "If you are on a macOS, `$ zsh` is set as your default shell."
    }
  },
  "Let's go piece by piece to understand the`$ echo 'eval \"$(~/.local/bin/mise activate zsh)\"' >> ~/.zshrc` command. Starting with `$ eval`, an built-in shell command that takes a string as an argument and evaluates it as if it were a command",
  {
    "question": "Which is the simplest, correct usage of the `eval` command?",
    "answer": {
      "choices": [
        "`$ eval $(echo echo 'hi')`",
        "`$ eval 'hi'`",
        "`$ eval $(echo 'hi')`",
        "`$ eval echo 'hi'`"
      ],
      "correct_choice_index": 3,
      "explanation": "Even though `$ eval $(echo echo 'hi')` also works, it is not the simplest usage of the `eval` command."
    }
  },
  "For `$(...)`: This is command substitution. It runs the command inside the parentheses and replaces the $(...) with the output of that command",
  {
    "question": "What is the simplest correct usage of the `$(...)` syntax?",
    "answer": {
      "choices": [
        "`$ $(ls)`",
        "`$ $(pwd)`",
        "`$ echo $(echo 'hi')`",
        "`$ echo $(cd)`"
      ],
      "correct_choice_index": 2,
      "explanation": "Though some of these may not give you errors, `$ echo $(echo 'hi')` as we know the evaluation of echo 'hi' is 'hi', so then we have `$ echo 'hi', which prints 'hi'."
    }
  },
  "We will not cover `$(~/.local/bin/mise activate zsh)` but know that it will output some valid command to be evaluated. That evaluate is a string as that is what echo expects. Now, we had simplify it to `$ echo 'some string...' >> ~/.zshrc`?. Let's test what the `>>` operator does.",
  {
    "question": "What does `$ echo 'test1' >> test.txt` do?",
    "answer": {
      "choices": [
        "It overwrites the content of the file",
        "It appends the content to the file",
        "It creates a new file and writes 'test1' to it",
        "It deletes the file"
      ],
      "correct_choice_index": 1,
      "explanation": "The `>>` operator appends the content to the file. If the file does not exist, it creates a new file and writes 'test1' to it."
    }
  },
  {
    "question": "What is the ultimate result of running `$ echo 'eval \"$(~/.local/bin/mise activate zsh)\"' >> ~/.zshrc`?",
    "answer": {
      "choices": [
        "It overwrites the `.zshrc` file with the `mise` activation command",
        "It appends the `mise` activation command to the `.zshrc` file",
        "It creates a new `.zshrc` file with the `mise` activation command",
        "It deletes the `.zshrc` file"
      ],
      "correct_choice_index": 1,
      "explanation": "The `>>` operator appends the `mise` activation command to the `.zshrc` file. This ensures that the `mise` environment is activated every time a new terminal session is started."
    }
  },
  {
    "question": "What is the purpose of the `.zshrc` file?",
    "answer": {
      "choices": [
        "It is a configuration file for the bash shell",
        "It is a configuration file for the zsh shell",
        "It is a configuration file for the fish shell",
        "It is a configuration file for the sh shell"
      ],
      "correct_choice_index": 1,
      "explanation": "The `.zshrc` file is a configuration file for the zsh shell, where you can set environment variables, aliases, and other settings. Basically, it is a script that runs every time a new terminal session is started."
    }
  },
  {
    "question": "DO NOT TEST OUT ALL OF THESE COMMANDS AS some may delete your configuration file. How do you ensure 'hi' prints every time a new terminal is opened?",
    "answer": {
      "choices": [
        "`$ echo 'echo \"hi\"' > ~/.zshrc`",
        "`$ echo 'echo \"hi\"' | ~/.zshrc`",
        "`$ echo 'echo \"hi\"' < ~/.zshrc`",
        "`$ echo 'echo \"hi\"' >> ~/.zshrc`"
      ],
      "correct_choice_index": 3,
      "explanation": "The `>>` operator appends the command `echo 'hi'` to the `.zshrc` file, so it will be executed every time a new terminal is opened. The dangerous command is >, which overwrites the file. You can test this out with a simple command like `$ echo 'echo \"hi\"' > test.txt` then `$ cat test.txt` to see the contents, then `$ echo 'echo \"bye\"' > test.txt`"
    }
  },
  "Finish your mise installation, in the next chapter we will begin using it"
]
