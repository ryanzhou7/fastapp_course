[
  "# Chapter 1. The python interpreter",
  "We learn by starting from scratch, as if you just received a new computer. The first thing to do is to install python. Luckily, it is most likely already installed on your computer.",
  {
    "question": "From the terminal how do you check if python is installed and it's version?",
    "answer": {
      "choices": [
        "`$ python -v`",
        "`$ python --version`",
        "`$ python -version`",
        "`$ python -V`"
      ],
      "correct_choice_index": 1,
      "explanation": "If python was not installed, `$ python --version` would yield an error."
    }
  },
  {
    "question": "You will often see `$ python` and `$ python3`, what is the difference?",
    "answer": {
      "choices": [
        "`$ python` refers to Python 3.x, `$ python3` refers to Python 2.x",
        "`$ python` and `$ python3` are aliases for the same version",
        "`$ python` refers to Python 2.x, `$ python3` refers to Python 3.x",
        "`$ python` is for Windows, `$ python3` is for Unix-based systems"
      ],
      "correct_choice_index": 2,
      "explanation": "For simplicity we will use `$ python` to refer to Python 3.x in this guide. Also, you can set it so both `$ python` and `$ python3` point to python3."
    }
  },
  {
    "question": "How do you determine the location of where the currently active python in your terminal is installed?",
    "answer": {
      "choices": [
        "`$ which python`",
        "`$ where python`",
        "`$ locate python`",
        "`$ find python`"
      ],
      "correct_choice_index": 0,
      "explanation": "This is a commonly used command. Even if `$ python --version` results in what you expected, the current python may not be where you expect it to be."
    }
  },
  {
    "question": "What happens when you run `$ python` ?",
    "answer": {
      "choices": [
        "`$ python` compiles Python code",
        "`$ python` opens the Python documentation",
        "`$ python` starts the Python interpreter",
        "`$ python` installs Python packages"
      ],
      "correct_choice_index": 2
    }
  },
  {
    "question": "What is an interpreter?",
    "answer": {
      "choices": [
        "A program that translates high-level code into machine code all at once",
        "A program that converts source code into bytecode",
        "A program that compiles code into an executable file",
        "A program that executes instructions written in a high-level programming language"
      ],
      "correct_choice_index": 3,
      "explanation": "An interpreter directly executes instructions written in a high-level programming language."
    }
  },
  "We can give interpreters instructions / code 1). one command at a time or 2). all at once as a script.",
  {
    "question": "Given the code `print('Hi')`, how do we give the python interpreter this code via one command at a time?",
    "answer": {
      "choices": [
        "`$ python print('Hi')`",
        "`$ python` then type `print('Hi')`",
        "`$ python -c \"'print('Hi')'\"`",
        "B and C"
      ],
      "correct_choice_index": 3,
      "explanation": "With `$ python`, you find yourself at a python REPL (Read-Eval-Print Loop) which is an interactive shell that allows you to execute Python commands one at a time and see the results immediately.\""
    }
  },
  {
    "question": "Given the code `print('Hi')`, how do we give the python interpreter this code via all at once as a script.?",
    "answer": {
      "choices": [
        "You need to first setup a virtual environment",
        "`$ python` then type `print('Hi')`",
        "Create a file called `file.py` with the code and run `$ python file.py`",
        "All of the above"
      ],
      "correct_choice_index": 2,
      "explanation": "Although setting up a virtual environment is best practice, this doesn't need to be done. There is nothign special the filename `file.py` by the way."
    }
  },
  {
    "question": "Suppose python wasn't installed on your computer, how do we install it?",
    "answer": {
      "choices": [
        "Download from the official Python website",
        "Use a package manager like `$ apt` or `$ brew`",
        "Install from a third-party website",
        "All of the above"
      ],
      "correct_choice_index": 3,
      "explanation": "All of these methods are valid depending on your OS. However, none of these methods of installation allow us to switch between python versions easily."
    }
  },
  {
    "question": "Why might we need to switch between python versions?",
    "answer": {
      "choices": [
        "Different projects may require different versions",
        "To test compatibility with different versions",
        "To use features available only in specific versions",
        "All of the above"
      ],
      "correct_choice_index": 3
    }
  },
  "If you search for the tool to solve this problem you will most likely find [pyenv](https://github.com/pyenv/pyenv) which is very popular and well regarded. But [mise](https://github.com/jdx/mise?tab=readme-ov-file#what-is-it) is a better choice as it is a lightning fast, more general tool that can manage multiple languages and tools, which we'll see next."
]
